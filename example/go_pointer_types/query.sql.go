// Code generated by pggen. DO NOT EDIT.

package go_pointer_types

import (
	"context"
	"fmt"

	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgconn"
)

type QueryName struct{}

// Querier is a typesafe Go interface backed by SQL queries.
type Querier interface {
	GenSeries1(ctx context.Context) (*int, error)

	GenSeries(ctx context.Context) ([]*int, error)

	GenSeriesArr1(ctx context.Context) ([]int, error)

	GenSeriesArr(ctx context.Context) ([][]int, error)

	GenSeriesStr1(ctx context.Context) (*string, error)

	GenSeriesStr(ctx context.Context) ([]*string, error)
}

var _ Querier = &DBQuerier{}

type DBQuerier struct {
	conn    genericConn
	errWrap func(err error) error
}

// genericConn is a connection like *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
type genericConn interface {
	Query(ctx context.Context, sql string, args ...any) (pgx.Rows, error)
	QueryRow(ctx context.Context, sql string, args ...any) pgx.Row
	Exec(ctx context.Context, sql string, arguments ...any) (pgconn.CommandTag, error)
}

// NewQuerier creates a DBQuerier that implements Querier.
func NewQuerier(conn genericConn) *DBQuerier {
	return &DBQuerier{
		conn: conn,
		errWrap: func(err error) error {
			return err
		},
	}
}

// RegisterTypes should be run in config.AfterConnect to load custom types
func RegisterTypes(ctx context.Context, conn *pgx.Conn) error {
	for _, typ := range typesToRegister {
		dt, err := conn.LoadType(ctx, typ)
		if err != nil {
			return err
		}
		conn.TypeMap().RegisterType(dt)
	}
	return nil
}

var typesToRegister = []string{}

func addTypeToRegister(typ string) struct{} {
	typesToRegister = append(typesToRegister, typ)
	return struct{}{}
}

const genSeries1SQL = `SELECT n
FROM generate_series(0, 2) n
LIMIT 1;`

// GenSeries1 implements Querier.GenSeries1.
func (q *DBQuerier) GenSeries1(ctx context.Context) (*int, error) {
	ctx = context.WithValue(ctx, QueryName{}, "GenSeries1")
	rows, err := q.conn.Query(ctx, genSeries1SQL)
	if err != nil {
		return nil, q.errWrap(fmt.Errorf("query GenSeries1: %w", err))
	}
	res, err := pgx.CollectExactlyOneRow(rows, pgx.RowTo[*int])
	return res, q.errWrap(err)
}

const genSeriesSQL = `SELECT n
FROM generate_series(0, 2) n;`

// GenSeries implements Querier.GenSeries.
func (q *DBQuerier) GenSeries(ctx context.Context) ([]*int, error) {
	ctx = context.WithValue(ctx, QueryName{}, "GenSeries")
	rows, err := q.conn.Query(ctx, genSeriesSQL)
	if err != nil {
		return nil, q.errWrap(fmt.Errorf("query GenSeries: %w", err))
	}
	res, err := pgx.CollectRows(rows, pgx.RowTo[*int])
	return res, q.errWrap(err)
}

const genSeriesArr1SQL = `SELECT array_agg(n)
FROM generate_series(0, 2) n;`

// GenSeriesArr1 implements Querier.GenSeriesArr1.
func (q *DBQuerier) GenSeriesArr1(ctx context.Context) ([]int, error) {
	ctx = context.WithValue(ctx, QueryName{}, "GenSeriesArr1")
	rows, err := q.conn.Query(ctx, genSeriesArr1SQL)
	if err != nil {
		return nil, q.errWrap(fmt.Errorf("query GenSeriesArr1: %w", err))
	}
	res, err := pgx.CollectExactlyOneRow(rows, pgx.RowTo[[]int])
	return res, q.errWrap(err)
}

const genSeriesArrSQL = `SELECT array_agg(n)
FROM generate_series(0, 2) n;`

// GenSeriesArr implements Querier.GenSeriesArr.
func (q *DBQuerier) GenSeriesArr(ctx context.Context) ([][]int, error) {
	ctx = context.WithValue(ctx, QueryName{}, "GenSeriesArr")
	rows, err := q.conn.Query(ctx, genSeriesArrSQL)
	if err != nil {
		return nil, q.errWrap(fmt.Errorf("query GenSeriesArr: %w", err))
	}
	res, err := pgx.CollectRows(rows, pgx.RowTo[[]int])
	return res, q.errWrap(err)
}

const genSeriesStr1SQL = `SELECT n::text
FROM generate_series(0, 2) n
LIMIT 1;`

// GenSeriesStr1 implements Querier.GenSeriesStr1.
func (q *DBQuerier) GenSeriesStr1(ctx context.Context) (*string, error) {
	ctx = context.WithValue(ctx, QueryName{}, "GenSeriesStr1")
	rows, err := q.conn.Query(ctx, genSeriesStr1SQL)
	if err != nil {
		return nil, q.errWrap(fmt.Errorf("query GenSeriesStr1: %w", err))
	}
	res, err := pgx.CollectExactlyOneRow(rows, pgx.RowTo[*string])
	return res, q.errWrap(err)
}

const genSeriesStrSQL = `SELECT n::text
FROM generate_series(0, 2) n;`

// GenSeriesStr implements Querier.GenSeriesStr.
func (q *DBQuerier) GenSeriesStr(ctx context.Context) ([]*string, error) {
	ctx = context.WithValue(ctx, QueryName{}, "GenSeriesStr")
	rows, err := q.conn.Query(ctx, genSeriesStrSQL)
	if err != nil {
		return nil, q.errWrap(fmt.Errorf("query GenSeriesStr: %w", err))
	}
	res, err := pgx.CollectRows(rows, pgx.RowTo[*string])
	return res, q.errWrap(err)
}
