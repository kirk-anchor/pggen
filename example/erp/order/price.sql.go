// Code generated by pggen. DO NOT EDIT.

package order

import (
	"sync"
	"context"
	"fmt"
	"github.com/jackc/pgx/v5/pgtype"
)

const findOrdersByPriceSQL = `SELECT * FROM orders WHERE order_total > $1;`

type FindOrdersByPriceRow struct {
	OrderID    int32              `json:"order_id"`
	OrderDate  pgtype.Timestamptz `json:"order_date"`
	OrderTotal pgtype.Numeric     `json:"order_total"`
	CustomerID *int32             `json:"customer_id"`
}

// FindOrdersByPrice implements Querier.FindOrdersByPrice.
func (q *DBQuerier) FindOrdersByPrice(ctx context.Context, minTotal pgtype.Numeric) ([]FindOrdersByPriceRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindOrdersByPrice")
	rows, err := q.conn.Query(ctx, findOrdersByPriceSQL, minTotal)
	if err != nil {
		return nil, fmt.Errorf("query FindOrdersByPrice: %w", err)
	}
	fds := rows.FieldDescriptions()
	plan0 := planScan(pgtype.TextCodec{}, fds[0], (*int32)(nil))
	plan1 := planScan(pgtype.TextCodec{}, fds[1], (*Timestamptz)(nil))
	plan2 := planScan(pgtype.TextCodec{}, fds[2], (*Numeric)(nil))
	plan3 := planScan(pgtype.TextCodec{}, fds[3], (**int32)(nil))

	return pgx.CollectRows(rows, func(row pgx.CollectableRow) (FindOrdersByPriceRow, error) {
		vals := row.RawValues()
		var item FindOrdersByPriceRow
		if err := plan0.Scan(vals[0], &item); err != nil {
			return item, fmt.Errorf("scan FindOrdersByPrice.order_id: %w", err)
		}
		if err := plan1.Scan(vals[1], &item); err != nil {
			return item, fmt.Errorf("scan FindOrdersByPrice.order_date: %w", err)
		}
		if err := plan2.Scan(vals[2], &item); err != nil {
			return item, fmt.Errorf("scan FindOrdersByPrice.order_total: %w", err)
		}
		if err := plan3.Scan(vals[3], &item); err != nil {
			return item, fmt.Errorf("scan FindOrdersByPrice.customer_id: %w", err)
		}
		return item, nil
	})
}

const findOrdersMRRSQL = `SELECT date_trunc('month', order_date) AS month, sum(order_total) AS order_mrr
FROM orders
GROUP BY date_trunc('month', order_date);`

type FindOrdersMRRRow struct {
	Month    pgtype.Timestamptz `json:"month"`
	OrderMRR pgtype.Numeric     `json:"order_mrr"`
}

// FindOrdersMRR implements Querier.FindOrdersMRR.
func (q *DBQuerier) FindOrdersMRR(ctx context.Context) ([]FindOrdersMRRRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindOrdersMRR")
	rows, err := q.conn.Query(ctx, findOrdersMRRSQL)
	if err != nil {
		return nil, fmt.Errorf("query FindOrdersMRR: %w", err)
	}
	fds := rows.FieldDescriptions()
	plan0 := planScan(pgtype.TextCodec{}, fds[0], (*Timestamptz)(nil))
	plan1 := planScan(pgtype.TextCodec{}, fds[1], (*Numeric)(nil))

	return pgx.CollectRows(rows, func(row pgx.CollectableRow) (FindOrdersMRRRow, error) {
		vals := row.RawValues()
		var item FindOrdersMRRRow
		if err := plan0.Scan(vals[0], &item); err != nil {
			return item, fmt.Errorf("scan FindOrdersMRR.month: %w", err)
		}
		if err := plan1.Scan(vals[1], &item); err != nil {
			return item, fmt.Errorf("scan FindOrdersMRR.order_mrr: %w", err)
		}
		return item, nil
	})
}
